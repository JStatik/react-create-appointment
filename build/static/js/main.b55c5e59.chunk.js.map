{"version":3,"sources":["components/Cita.js","hooks/useForm.js","helpers/isValidForm.js","components/Form.js","AdministradorPacientes.js","index.js"],"names":["Cita","cita","setCitas","id","pet","owner","date","time","symptoms","className","onClick","citas","filter","handleClick","useForm","initialState","useState","formValues","setFormValues","handleInputChange","event","target","name","value","reset","newState","isValidForm","dateMoment","moment","petEscape","validator","escape","ownerEscape","timeEscape","symptomsEscape","trim","length","isEmpty","msgErrorPet","msgErrorOwner","msgErrorDate","msgErrorTime","msgErrorSymptoms","isValid","includes","Form","disabled","setDisabled","petError","setPetError","ownerError","setOwnerError","dateError","setDateError","timeError","setTimeError","symptomsError","setSymptomsError","autoComplete","onSubmit","preventDefault","uniqid","type","placeholder","onChange","AdministradorPacientes","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b55c5e59.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ( { cita, setCitas } ) => {\r\n    const { id, pet, owner, date, time, symptoms } = cita;\r\n\r\n    const handleClick = ( id ) => {\r\n        setCitas(\r\n            ( citas ) => citas.filter( cita => {\r\n                return cita.id !== id;\r\n            } )\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{ pet }</span></p>\r\n            <p>Dueño: <span>{ owner }</span></p>\r\n            <p>Fecha: <span>{ date }</span></p>\r\n            <p>Hora: <span>{ time }</span></p>\r\n            <p>Síntomas: <span>{ symptoms }</span></p>\r\n\r\n            <button\r\n                className=\"button-eliminar u-full-width\"\r\n                onClick={ () => handleClick( id ) }\r\n            >\r\n                Eliminar &times;\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    setCitas: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Cita;\r\n","import { useState } from 'react';\r\n\r\nconst useForm = ( initialState = {} ) => {\r\n    const [ formValues, setFormValues ] = useState( initialState );\r\n\r\n    const handleInputChange = ( event ) => {\r\n        setFormValues( {\r\n            ...formValues,\r\n            [ event.target.name ]: event.target.value\r\n        } );\r\n    };\r\n\r\n    const reset = ( newState = initialState ) => {\r\n        setFormValues( newState );\r\n    };\r\n\r\n    return [ formValues, handleInputChange, reset ];\r\n};\r\n\r\nexport default useForm;\r\n","import validator from 'validator';\r\nimport moment from 'moment';\r\nimport 'moment/locale/es';\r\n\r\nconst isValidForm = ( pet, owner, date, time, symptoms ) => {\r\n    const dateMoment = moment( date );\r\n    \r\n    const petEscape = validator.escape( pet );\r\n    const ownerEscape = validator.escape( owner );\r\n    const timeEscape = validator.escape( time );\r\n    const symptomsEscape = validator.escape( symptoms );\r\n\r\n    if( petEscape.trim().length === 0 || petEscape.trim().length < 2 || validator.isEmpty( petEscape ) ) {\r\n        return {\r\n            msgErrorPet: 'Ingrese un nombre de mascota válido.',\r\n            msgErrorOwner: null,\r\n            msgErrorDate: null,\r\n            msgErrorTime: null,\r\n            msgErrorSymptoms: null,\r\n            isValid: false\r\n        };\r\n    } if( ownerEscape.trim().length === 0 || ownerEscape.trim().length < 2 || validator.isEmpty( ownerEscape ) ) {\r\n        return {\r\n            msgErrorPet: null,\r\n            msgErrorOwner: 'Ingrese un nombre de propietario válido.',\r\n            msgErrorDate: null,\r\n            msgErrorTime: null,\r\n            msgErrorSymptoms: null,\r\n            isValid: false\r\n        };\r\n    } if( !dateMoment.isValid() ) {\r\n        return {\r\n            msgErrorPet: null,\r\n            msgErrorOwner: null,\r\n            msgErrorDate: 'Ingrese una fecha para el alta de la cita válida.',\r\n            msgErrorTime: null,\r\n            msgErrorSymptoms: null,\r\n            isValid: false\r\n        };\r\n    } if( timeEscape.trim().length !== 5 || !timeEscape.includes( ':' ) || validator.isEmpty( timeEscape ) ) {\r\n        return {\r\n            msgErrorPet: null,\r\n            msgErrorOwner: null,\r\n            msgErrorDate: null,\r\n            msgErrorTime: 'Ingrese una hora para el alta de la cita válida.',\r\n            msgErrorSymptoms: null,\r\n            isValid: false\r\n        };\r\n    } if( symptomsEscape.trim().length < 10 || validator.isEmpty( symptomsEscape ) ) {\r\n        return {\r\n            msgErrorPet: null,\r\n            msgErrorOwner: null,\r\n            msgErrorDate: null,\r\n            msgErrorTime: null,\r\n            msgErrorSymptoms: 'Ingrese una breve descripción de los síntomas. Al menos 10 caracteres.',\r\n            isValid: false\r\n        };\r\n    }\r\n\r\n    return { \r\n        msgErrorPet: null,\r\n        msgErrorOwner: null,\r\n        msgErrorDate: null,\r\n        msgErrorTime: null,\r\n        msgErrorSymptoms: null,\r\n        isValid: true\r\n    };\r\n};\r\n\r\nexport default isValidForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uniqid from 'uniqid';\r\nimport useForm from '../hooks/useForm';\r\nimport isValidForm from '../helpers/isValidForm';\r\n\r\nconst Form = ( { setCitas } ) => {\r\n    const [ formValues, handleInputChange, reset ] = useForm( { pet: '', owner: '', date: '', time: '', symptoms: '' } );\r\n    const { pet, owner, date, time, symptoms } = formValues;\r\n\r\n    const [ disabled, setDisabled ] = useState( false );\r\n\r\n    const [ petError, setPetError ] = useState( null );\r\n    const [ ownerError, setOwnerError ] = useState( null );\r\n    const [ dateError, setDateError ] = useState( null );\r\n    const [ timeError, setTimeError ] = useState( null );\r\n    const [ symptomsError, setSymptomsError ] = useState( null );\r\n\r\n    const handleSubmit = ( event ) => {\r\n        event.preventDefault();\r\n        setDisabled( true );\r\n\r\n        const { msgErrorPet, msgErrorOwner, msgErrorDate, msgErrorTime, msgErrorSymptoms, isValid } = isValidForm( pet, owner, date, time, symptoms );\r\n\r\n        setPetError( msgErrorPet );\r\n        setOwnerError( msgErrorOwner );\r\n        setDateError( msgErrorDate );\r\n        setTimeError( msgErrorTime );\r\n        setSymptomsError( msgErrorSymptoms );\r\n\r\n        if( isValid ) {\r\n            const id = uniqid();\r\n\r\n            setCitas( ( citas ) => [ ...citas, { id, pet, owner, date, time, symptoms } ] );\r\n\r\n            reset();\r\n        }\r\n\r\n        setDisabled( false );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Crear cita</h2>\r\n\r\n            { petError && <p className=\"alerta-error\">{ petError }</p> }\r\n            { ownerError && <p className=\"alerta-error\">{ ownerError }</p> }\r\n            { dateError && <p className=\"alerta-error\">{ dateError }</p> }\r\n            { timeError && <p className=\"alerta-error\">{ timeError }</p> }\r\n            { symptomsError && <p className=\"alerta-error\">{ symptomsError }</p> }\r\n\r\n            <form autoComplete=\"off\" onSubmit={ handleSubmit }>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nombre mascota\"\r\n                    className=\"u-full-width\"\r\n                    name=\"pet\"\r\n                    value={ pet }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nombre del dueño\"\r\n                    className=\"u-full-width\"\r\n                    name=\"owner\"\r\n                    value={ owner }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input\r\n                    type=\"date\"\r\n                    className=\"u-full-width\"\r\n                    name=\"date\"\r\n                    value={ date }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <input\r\n                    type=\"time\"\r\n                    className=\"u-full-width\"\r\n                    name=\"time\"\r\n                    value={ time }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <textarea\r\n                    placeholder=\"Síntomas...\"\r\n                    className=\"u-full-width\"\r\n                    name=\"symptoms\"\r\n                    value={ symptoms }\r\n                    onChange={ handleInputChange }\r\n                >\r\n                </textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    disabled={ disabled }\r\n                >\r\n                    Agregar cita\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nForm.propTypes = {\r\n    setCitas: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Form;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Cita from './components/Cita';\r\nimport Form from './components/Form';\r\n\r\nconst AdministradorPacientes = () => {\r\n    const [ citas, setCitas ] = useState( JSON.parse( localStorage.getItem( 'apa' ) )?.citas || [] );\r\n\r\n    useEffect( () => {\r\n        localStorage.setItem( 'apa', JSON.stringify( { citas } ) );\r\n    }, [ citas ] );\r\n\r\n    return (\r\n        <>\r\n            <h1>Administrador de Pacientes</h1>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"one-half column\">\r\n                        <Form setCitas={ setCitas } />\r\n                    </div>\r\n\r\n                    <div className=\"one-half column\">\r\n                        <h2>{ citas.length === 0 ? 'Agrega una nueva cita' : 'Administra tus citas' }</h2>\r\n\r\n                        {\r\n                            citas.map( cita => (\r\n                                <Cita key={ cita.id } cita={ cita } setCitas={ setCitas }  />\r\n                            ) )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdministradorPacientes;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AdministradorPacientes from './AdministradorPacientes';\r\n\r\nReactDOM.render( <AdministradorPacientes />, document.getElementById( 'root' ) );\r\n"],"sourceRoot":""}